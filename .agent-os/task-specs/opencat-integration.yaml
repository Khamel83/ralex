---
task_specification:
  name: "OpenCat Mobile Integration & Intelligence Optimization"
  id: "ralex-mobile-intelligence-complete"
  version: "1.3.0"
  description: "Complete OpenCat mobile integration + intelligence optimization with modern development practices"
  
  execution_mode:
    automation_level: "full"
    permission_mode: "dangerously-skip-permissions"
    continue_on_error: false
    git_auto_commit: true

  # Embedded User Philosophy - Applied to Every Decision
  core_principles:
    cost_optimization: "always_choose_cheapest_viable_option"
    simplicity_over_sophistication: "prefer_simple_solutions_over_complex_ones"
    existing_over_custom: "use_existing_libraries_and_tools_first"
    graceful_degradation: "build_fallbacks_not_perfect_systems"
    configuration_over_code: "prefer_config_files_over_hard_coding"
    minimal_viable_solutions: "implement_smallest_working_solution_first"
    
  decision_framework:
    primary_optimization_target: "cost_first_speed_second"
    complexity_threshold: "if_solution_is_complex_find_simpler_approach"
    dependency_preference: "minimal_new_dependencies"
    architecture_preference: "lightweight_wrappers_over_heavy_infrastructure"
    testing_philosophy: "pragmatic_testing_not_perfect_coverage"
    documentation_style: "clear_and_practical_over_comprehensive"
    
  # Modern Development Standards - Continuous Deployment Philosophy
  development_standards:
    versioning_strategy: "semantic_versioning_not_major_releases"
    branch_strategy: "feature_branches_merge_when_ready"
    deployment_philosophy: "main_always_deployable"
    release_cadence: "continuous_deployment_no_artificial_gates"
    feature_development: "complete_features_in_1hour_to_3weeks_timeframe"
    integration_approach: "merge_when_ready_not_when_scheduled"
    
  git_standards:
    commit_format: "conventional_commits_feat_fix_docs_refactor"
    branch_naming: "feature/description, hotfix/issue, docs/update"
    tagging_strategy: "semantic_versions_1_2_3_format"
    merge_strategy: "squash_and_merge_for_clean_history"
    main_branch_protection: "always_ready_for_production"
    
  phases:
    phase_1:
      name: "Documentation Updates"
      description: "Update all documentation for mobile-first OpenCat integration"
      tasks:
        - task: "update_claude_md"
          description: "Restructure CLAUDE.md with OpenCat as primary mobile interface"
          files:
            - "/home/RPI3/ralex/CLAUDE.md"
          actions:
            - "Move iOS section to prominent position after basic setup"
            - "Replace Pal Chat references with OpenCat focus"
            - "Add detailed OpenCat setup instructions"
            - "Include feature compatibility matrix"
            - "Add troubleshooting section"
            - "Document development workflow integration"
          validation:
            - "Verify all URLs and paths are correct"
            - "Ensure setup instructions are complete"
            - "Check internal consistency"
            
        - task: "update_readme_md"
          description: "Update README.md with mobile-first approach"
          files:
            - "/home/RPI3/ralex/README.md"
          actions:
            - "Add iOS-first approach to project description"
            - "Create quick start section for mobile users"
            - "Ensure consistency with CLAUDE.md"
            - "Update architecture overview"
          validation:
            - "Cross-reference with CLAUDE.md for consistency"
            - "Verify external links work"
            
        - task: "create_env_example"
          description: "Create .env.example for configuration clarity"
          files:
            - "/home/RPI3/ralex/.env.example"
          actions:
            - "Document all required environment variables"
            - "Add comments explaining each variable"
            - "Include OpenRouter API key requirement"
          validation:
            - "Ensure all variables from actual usage are documented"
            
      git_commit:
        message: "docs: Update documentation for OpenCat mobile-first integration"
        branch: "feature/opencat-mobile-integration"
        
    phase_2:
      name: "API Validation & Enhancement"
      description: "Ensure API endpoints meet OpenAI spec and mobile app requirements"
      tasks:
        - task: "test_api_endpoints"
          description: "Validate all API endpoints for OpenAI compatibility"
          commands:
            - "curl -s http://localhost:8000/v1/models | jq '.'"
            - "curl -s http://localhost:8000/health"
            - "curl -s -X POST http://localhost:8000/v1/chat/completions -H 'Content-Type: application/json' -d '{\"model\":\"ralex-bridge\",\"message\":\"test\",\"max_tokens\":10}'"
          validation:
            - "Verify models endpoint returns proper format"
            - "Confirm health endpoint responds"
            - "Check chat completions endpoint structure"
            
        - task: "enhance_error_handling"
          description: "Improve error responses for mobile clients"
          files:
            - "/home/RPI3/ralex/ralex_bridge.py"
            - "/home/RPI3/ralex/ralex_api.py"
          actions:
            - "Standardize error response formats"
            - "Add mobile-friendly error messages"
            - "Implement graceful OpenRouter API failures"
          validation:
            - "Test error scenarios"
            - "Verify error message clarity"
            
        - task: "enhance_logging"
          description: "Improve logging for mobile client debugging"
          files:
            - "/home/RPI3/ralex/ralex_bridge.py"
            - "/home/RPI3/ralex/start_ralex_v4.py"
          actions:
            - "Add mobile client connection logging"
            - "Implement consistent log formats"
            - "Add performance metrics logging"
          validation:
            - "Check log output quality"
            - "Verify log levels are appropriate"
            
      git_commit:
        message: "feat: Enhance API endpoints for mobile client compatibility"
        branch: "feature/opencat-mobile-integration"
        
    phase_3:
      name: "Security & Configuration Review"
      description: "Assess and document security considerations for production"
      tasks:
        - task: "security_assessment"
          description: "Document security considerations for RPi deployment"
          files:
            - "/home/RPI3/ralex/SECURITY.md"
          actions:
            - "Document current authentication strategy"
            - "Add network security recommendations"
            - "Include rate limiting considerations"
            - "Add mobile app security best practices"
          validation:
            - "Ensure comprehensive security coverage"
            
        - task: "configuration_validation"
          description: "Add startup configuration validation"
          files:
            - "/home/RPI3/ralex/start_ralex_v4.py"
          actions:
            - "Add environment variable validation"
            - "Implement configuration health checks"
            - "Add startup dependency verification"
          validation:
            - "Test with missing environment variables"
            - "Verify graceful failure modes"
            
      git_commit:
        message: "security: Add security documentation and configuration validation"
        branch: "feature/opencat-mobile-integration"
        
    phase_4:
      name: "Comprehensive Testing & Validation"
      description: "Full system testing and validation"
      tasks:
        - task: "system_integration_test"
          description: "Test complete Ralex V4 startup and functionality"
          commands:
            - "python start_ralex_v4.py &"
            - "sleep 30"
            - "curl -s http://localhost:8000/health"
            - "curl -s http://localhost:8000/v1/models"
            - "curl -s http://localhost:3000/health"
          validation:
            - "All services start successfully"
            - "API endpoints respond correctly"
            - "No critical errors in logs"
            
        - task: "mobile_api_compatibility_test"
          description: "Test API compatibility with mobile app requirements"
          commands:
            - "curl -s -X POST http://localhost:8000/v1/chat/completions -H 'Content-Type: application/json' -d '{\"model\":\"ralex-bridge\",\"message\":\"Hello from mobile test\",\"max_tokens\":50}'"
          validation:
            - "Response format matches OpenAI spec"
            - "Error handling works correctly"
            - "Model routing functions properly"
            
        - task: "documentation_accuracy_test"
          description: "Verify all documentation instructions work"
          validation:
            - "All file paths in documentation exist"
            - "All URLs are accessible"
            - "Setup instructions are complete"
            - "Code examples execute correctly"
            
        - task: "log_analysis"
          description: "Analyze system logs for issues"
          commands:
            - "tail -100 ralex_startup.log"
            - "journalctl -u ralex --since '1 hour ago' || echo 'No systemd service'"
          validation:
            - "No critical errors or warnings"
            - "Performance metrics within acceptable ranges"
            - "All components logging properly"
            
      git_commit:
        message: "test: Add comprehensive system testing and validation"
        branch: "feature/opencat-mobile-integration"
        
    phase_5:
      name: "Final Integration & Documentation"
      description: "Final git integration and comprehensive documentation review"
      tasks:
        - task: "create_quick_start_guide"
          description: "Create 5-minute setup guide for new users"
          files:
            - "/home/RPI3/ralex/QUICKSTART.md"
          actions:
            - "Create step-by-step OpenCat setup"
            - "Include common troubleshooting"
            - "Add development workflow examples"
          validation:
            - "Guide is complete and accurate"
            - "All links and references work"
            
        - task: "final_documentation_review"
          description: "Comprehensive documentation consistency check"
          validation:
            - "All documentation is internally consistent"
            - "No broken links or references"
            - "Version information is current"
            - "All features are properly documented"
            
        - task: "performance_benchmarking"
          description: "Establish performance baselines"
          commands:
            - "time curl -s http://localhost:8000/v1/models"
            - "time curl -s -X POST http://localhost:8000/v1/chat/completions -H 'Content-Type: application/json' -d '{\"model\":\"ralex-bridge\",\"message\":\"performance test\",\"max_tokens\":10}'"
          validation:
            - "Response times are acceptable"
            - "System resources usage is reasonable"
            
      git_commit:
        message: "docs: Add quick start guide and final documentation polish"
        branch: "feature/opencat-mobile-integration"
        
    phase_6:
      name: "Git Integration & OpenCat Release"
      description: "Complete OpenCat mobile integration"
      tasks:
        - task: "merge_to_main"
          description: "Merge feature branch to main"
          git_actions:
            - "git checkout main"
            - "git merge feature/opencat-mobile-integration"
            - "git tag 1.2.0"
            - "git push origin main --tags"
            - "git checkout -b feature/intelligence-optimization"
          validation:
            - "Merge completed successfully"
            - "No conflicts occurred"
            - "Tag created properly"
            
        - task: "update_github_description"
          description: "Update repository description for mobile-first approach"
          validation:
            - "Repository reflects current state"
            - "README.md is the primary landing page"
            
    # INTELLIGENCE OPTIMIZATION PHASES
    phase_7:
      name: "Intelligence Router Foundation"
      description: "Create minimal complexity detection and routing system"
      philosophy_application: "Use simplest possible intent classification, minimal dependencies"
      tasks:
        - task: "create_intelligence_config"
          description: "Create simple intelligence optimization configuration file"
          files:
            - "/home/RPI3/ralex/.ralex/intelligence-config.yaml"
          actions:
            - "Create intent-to-complexity mappings (simple YAML)"
            - "Define cost-tier model mappings for LiteLLM"
            - "Add enable/disable toggle"
            - "Use existing model names from OpenRouter"
          philosophy_notes: "Configuration over code - everything in simple YAML"
          validation:
            - "Config file is human-readable"
            - "All model names exist in OpenRouter"
            - "Intent mappings cover common cases"
            
        - task: "create_lightweight_router"
          description: "Build minimal intelligence routing wrapper"
          files:
            - "/home/RPI3/ralex/ralex_intelligent.py"
          actions:
            - "Create simple 20-line intent classifier using existing models"
            - "Build lightweight routing logic (agent-os vs direct)"
            - "Add graceful fallback to existing ralex flow"
            - "Use existing semantic_classifier as foundation"
          philosophy_notes: "Wrapper approach - minimal code, maximum reuse"
          validation:
            - "Router file under 100 lines total"
            - "Zero breaking changes to existing code"
            - "Fallback works if intelligence optimization disabled"
            
      git_commit:
        message: "feat: add lightweight intelligence router foundation"
        branch: "feature/intelligence-optimization"
        
    phase_8:
      name: "Cost Optimization - Model Tier Integration"
      description: "Integrate cost-first model selection with LiteLLM"
      philosophy_application: "Use existing LiteLLM features, avoid custom model management"
      tasks:
        - task: "configure_litellm_tiers"
          description: "Set up cost-optimized model tiers in LiteLLM"
          files:
            - "/home/RPI3/ralex/ralex_bridge.py"
          actions:
            - "Add tier parameter support to existing LiteLLM calls"
            - "Implement prompt injection for model selection"
            - "Configure cost-tier mappings from intelligence-config.yaml"
            - "Use existing OpenRouter model endpoints"
          philosophy_notes: "Leverage existing LiteLLM routing, add simple tier parameter"
          validation:
            - "Cheap models route correctly"
            - "Premium models only used when specified"
            - "Existing functionality unchanged"
            
        - task: "add_context_sentiment"
          description: "Add minimal context tracking (3-5 tokens)"
          files:
            - "/home/RPI3/ralex/ralex_intelligent.py"
          actions:
            - "Add simple context state tracking"
            - "Append 3-5 token context hints to queries"
            - "Store minimal context in memory (not files)"
            - "Clear context after 10 minutes idle"
          philosophy_notes: "Minimal memory-based context, no complex persistence"
          validation:
            - "Context hints improve routing decisions"
            - "Memory usage stays minimal"
            - "Context clears automatically"
            
      git_commit:
        message: "feat: add cost-optimized model tiers and minimal context"
        branch: "feature/intelligence-optimization"
        
    phase_9:
      name: "Agent-OS Integration"
      description: "Connect intelligence router with agent-os workflows"
      philosophy_application: "Use existing agent-os, minimal custom templates"
      tasks:
        - task: "create_basic_templates"
          description: "Add essential development workflow templates"
          files:
            - "/home/RPI3/ralex/.agent-os/templates/refactor.yaml"
            - "/home/RPI3/ralex/.agent-os/templates/debug.yaml"
            - "/home/RPI3/ralex/.agent-os/templates/test.yaml"
          actions:
            - "Create 3 basic templates for common dev tasks"
            - "Use existing agent-os template format"
            - "Keep templates simple and generic"
            - "Focus on cost-optimization in each template"
          philosophy_notes: "Only essential templates, leverage existing agent-os features"
          validation:
            - "Templates execute successfully"
            - "Templates follow cost-first principles"
            - "Templates integrate with existing workflows"
            
        - task: "integrate_router_with_agentos"
          description: "Connect intelligence router to agent-os execution"
          files:
            - "/home/RPI3/ralex/ralex_intelligent.py"
          actions:
            - "Add agent-os task execution calls"
            - "Implement simple template selection logic"
            - "Add fallback to direct model if agent-os fails"
            - "Use existing agent-os execution methods"
          philosophy_notes: "Simple integration, robust fallbacks"
          validation:
            - "Complex queries route to agent-os"
            - "Simple queries stay direct"
            - "Fallbacks work reliably"
            
      git_commit:
        message: "feat: integrate intelligence router with agent-os workflows"
        branch: "feature/intelligence-optimization"
        
    phase_10:
      name: "Cost Tracking & Optimization"
      description: "Add pragmatic cost monitoring without complexity"
      philosophy_application: "Simple logging-based tracking, no databases or dashboards"
      tasks:
        - task: "add_simple_cost_tracking"
          description: "Log cost metrics to simple file"
          files:
            - "/home/RPI3/ralex/ralex_intelligent.py"
            - "/home/RPI3/ralex/.ralex/cost_log.txt"
          actions:
            - "Log model usage and estimated costs to text file"
            - "Add simple cost calculation based on token usage"
            - "Include before/after Intelligence cost comparison"
            - "Keep logging lightweight and optional"
          philosophy_notes: "Text file logging only, no complex analytics"
          validation:
            - "Cost log file contains useful data"
            - "Performance impact is minimal"
            - "Cost estimates are reasonable"
            
        - task: "add_usage_optimization"
          description: "Implement simple cost optimization rules"
          files:
            - "/home/RPI3/ralex/.ralex/intelligence-config.yaml"
            - "/home/RPI3/ralex/ralex_intelligent.py"
          actions:
            - "Add max_cost_per_query limits in config"
            - "Implement simple model downgrade rules"
            - "Add daily/weekly cost budgeting"
            - "Fail gracefully when budget exceeded"
          philosophy_notes: "Simple rules-based optimization, no ML needed"
          validation:
            - "Cost limits are respected"
            - "Budget controls work correctly"
            - "System degrades gracefully"
            
      git_commit:
        message: "feat: add simple cost tracking and optimization rules"
        branch: "feature/intelligence-optimization"
        
    phase_11:
      name: "Intelligence Testing & Validation"
      description: "Pragmatic testing focused on cost and functionality"
      philosophy_application: "Test core functionality, not edge cases"
      tasks:
        - task: "test_intelligence_routing"
          description: "Validate routing decisions are cost-effective"
          commands:
            - "python -c \"from ralex_intelligent import route_query; print(route_query('what is python'))\""
            - "python -c \"from ralex_intelligent import route_query; print(route_query('refactor my code'))\""
            - "python -c \"from ralex_intelligent import route_query; print(route_query('debug this error'))\""
          validation:
            - "Simple queries route direct"
            - "Complex queries route to agent-os"
            - "Routing completes in under 3 seconds"
            
        - task: "test_cost_optimization"
          description: "Verify cost optimization is working"
          commands:
            - "grep 'cheap' /home/RPI3/ralex/.ralex/cost_log.txt | wc -l"
            - "grep 'premium' /home/RPI3/ralex/.ralex/cost_log.txt | wc -l"
          validation:
            - "Cheap models used more frequently than premium"
            - "Cost tracking data exists"
            - "No critical cost overruns"
            
        - task: "test_fallback_mechanisms"
          description: "Ensure graceful degradation works"
          commands:
            - "python -c \"import ralex_intelligent; ralex_intelligent.test_fallbacks()\""
          validation:
            - "Agent-os failure routes to direct model"
            - "Intelligence disable fallback works"
            - "No system crashes on failure"
            
      git_commit:
        message: "test: Add intelligence optimization testing"
        branch: "feature/intelligence-optimization"
        
    phase_12:
      name: "Intelligence Final Integration & Documentation"
      description: "Complete Intelligence integration with minimal documentation"
      philosophy_application: "Practical documentation, no over-documentation"
      tasks:
        - task: "update_claude_md_for_v5"
          description: "Add Intelligence section to CLAUDE.md"
          files:
            - "/home/RPI3/ralex/CLAUDE.md"
          actions:
            - "Add Intelligence Optimization section"
            - "Document cost-first philosophy"
            - "Explain simple enable/disable toggle"
            - "Include basic troubleshooting"
          philosophy_notes: "Practical documentation only, focus on user value"
          validation:
            - "Intelligence features clearly explained"
            - "Cost benefits highlighted"
            - "Simple for users to understand"
            
        - task: "create_v5_entry_point"
          description: "Add Intelligence toggle to main startup script"
          files:
            - "/home/RPI3/ralex/start_ralex_v4.py"
          actions:
            - "Add Intelligence_ENABLED environment variable check"
            - "Route through ralex_intelligent.py when enabled"
            - "Maintain backward compatibility"
            - "Default to current behavior if intelligence disabled"
          philosophy_notes: "Opt-in Intelligence, safe defaults"
          validation:
            - "Intelligence can be enabled/disabled easily"
            - "Default behavior unchanged"
            - "No breaking changes"
            
        - task: "final_v5_integration_test"
          description: "End-to-end Intelligence system test"
          commands:
            - "export Intelligence_ENABLED=true && python start_ralex_v4.py &"
            - "sleep 30"
            - "curl -s -X POST http://localhost:8000/v1/chat/completions -H 'Content-Type: application/json' -d '{\"model\":\"ralex-bridge\",\"message\":\"refactor this function\",\"max_tokens\":50}'"
          validation:
            - "Intelligence system starts successfully"
            - "Intelligence routing works end-to-end"
            - "Cost optimization is active"
            - "All fallbacks function correctly"
            
      git_commit:
        message: "feat: complete intelligence optimization integration"
        branch: "feature/intelligence-optimization"
        
    phase_13:
      name: "Intelligence Release & Merge to Main"
      description: "Final Intelligence release preparation"
      tasks:
        - task: "merge_v5_to_main"
          description: "Merge Intelligence feature branch to main"
          git_actions:
            - "git checkout main"
            - "git merge feature/intelligence-intelligence-optimization"
            - "git tag 1.3.0"
            - "git push origin main --tags"
          validation:
            - "Intelligence merge completed successfully"
            - "No merge conflicts"
            - "Intelligence tag created"
            
        - task: "update_version_info"
          description: "Update version information"
          files:
            - "/home/RPI3/ralex/CLAUDE.md"
            - "/home/RPI3/ralex/README.md"
          actions:
            - "Update version to 1.3.0"
            - "Add Intelligence feature highlights"
            - "Update last modified dates"
          validation:
            - "Version information accurate"
            - "Feature descriptions current"
            
  success_criteria:
    # OpenCat Integration Success
    - "All documentation updated for OpenCat mobile-first approach"
    - "API endpoints validated for OpenAI compatibility"
    - "Security considerations documented"
    - "OpenCat setup instructions are clear and complete"
    - "New users can set up OpenCat interface with zero ambiguity"
    
    # Intelligence Optimization Success
    - "Intelligence router reduces overall API costs by 20%+"
    - "Complex queries route to agent-os, simple queries stay direct"
    - "Cost tracking and optimization rules function correctly"
    - "All fallback mechanisms work reliably"
    - "Intelligence can be enabled/disabled with single environment variable"
    - "System embeds cost-first philosophy in all decisions"
    - "Zero breaking changes to existing functionality"
    
  rollback_plan:
    - "git checkout main"
    - "git reset --hard HEAD~1"
    - "Restore original documentation if needed"
    
  estimated_duration: "120-150 minutes (OpenCat: 45-60min, Intelligence: 75-90min)"
  
  post_execution_validation:
    # OpenCat Integration Validation
    - "Full system startup test with OpenCat integration"
    - "Mobile API compatibility verification"
    - "OpenCat connection and functionality test"
    - "Documentation accuracy confirmation"
    
    # Intelligence Optimization Validation  
    - "intelligence routing cost optimization verification"
    - "Agent-os integration functionality test"
    - "Cost tracking and budgeting validation"
    - "All fallback mechanisms tested"
    - "Performance baseline establishment for cost comparison"