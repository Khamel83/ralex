---
# Modern Development Standards for Ralex
# These standards are embedded in all agent-os task specifications

ralex_development_philosophy:
  project_name: "Ralex"
  description: "Always just 'Ralex' - no version numbers in product name"
  evolution_approach: "Continuous development, not version releases"
  
versioning_strategy:
  format: "semantic_versioning"
  pattern: "1.2.3 (major.minor.patch)"
  examples:
    - "1.0.0 - Initial release"
    - "1.1.0 - OpenCat integration"
    - "1.2.0 - Mobile-first redesign" 
    - "1.3.0 - Intelligence optimization"
    - "1.3.1 - Bug fixes"
  avoid:
    - "V4, V5, V6 naming"
    - "Major version releases"
    - "Artificial version gates"

branch_strategy:
  main_branch: "main"
  protection: "always_production_ready"
  feature_branches:
    naming: "feature/description-of-feature"
    examples:
      - "feature/opencat-integration"
      - "feature/cost-optimization"
      - "feature/agent-os-templates"
    lifecycle: "merge_when_ready_not_when_scheduled"
    duration: "1_hour_to_3_weeks_acceptable"
  
  hotfix_branches:
    naming: "hotfix/issue-description"
    examples:
      - "hotfix/api-timeout"
      - "hotfix/memory-leak"
    priority: "immediate_merge_when_tested"
    
  documentation_branches:
    naming: "docs/update-description"
    examples:
      - "docs/setup-instructions"
      - "docs/api-reference"

git_commit_standards:
  format: "conventional_commits"
  structure: "type: description"
  types:
    feat: "New feature or capability"
    fix: "Bug fix or issue resolution"
    docs: "Documentation updates"
    refactor: "Code refactoring without feature changes"
    test: "Test additions or updates"
    style: "Code style/formatting changes"
    perf: "Performance improvements"
    
  examples:
    - "feat: add opencat mobile integration"
    - "fix: resolve api timeout issue"
    - "docs: update setup instructions"
    - "refactor: simplify routing logic"
    - "test: add intelligence router tests"
    
  avoid:
    - "Version 5 updates"
    - "Big release changes"
    - "Vague descriptions"

deployment_philosophy:
  strategy: "continuous_deployment"
  main_branch: "always_deployable"
  feature_integration: "merge_when_complete_and_tested"
  release_gates: "no_artificial_version_barriers"
  quality_gates: "testing_and_validation_required"
  
  principles:
    - "Features ship when ready, not when scheduled"
    - "Main branch is always production-ready"
    - "Small, frequent changes over big releases"
    - "Automated testing validates every change"
    - "Quick rollback capability always available"

feature_development:
  approach: "feature_driven_not_version_driven"
  sizing: "complete_features_in_reasonable_timeframe"
  timeframe: "1_hour_minimum_3_weeks_maximum"
  integration: "merge_when_feature_complete"
  
  workflow:
    1: "Create feature branch from main"
    2: "Develop feature incrementally"
    3: "Test feature thoroughly"
    4: "Merge to main when complete"
    5: "Tag semantic version if significant"
    6: "Deploy automatically"

project_naming:
  product_name: "Ralex"
  avoid_version_suffixes: true
  examples_correct:
    - "Ralex Documentation"
    - "Ralex Intelligence Optimization"
    - "Ralex Mobile Integration"
  examples_incorrect:
    - "Ralex V5"
    - "Ralex Version 4"
    - "Ralex 2025 Edition"

documentation_standards:
  version_references: "use_semantic_versions_only"
  feature_references: "describe_by_capability_not_version"
  examples:
    correct: "Intelligence optimization features"
    incorrect: "V5 features"
    
  update_strategy: "continuous_updates_with_features"
  structure: "capability_based_not_version_based"

agent_os_integration:
  task_naming: "feature_based_not_version_based"
  commit_messages: "follow_conventional_commit_standards"
  branch_management: "automatic_branch_creation_and_cleanup"
  merge_strategy: "squash_and_merge_for_clean_history"
  
embedded_in_every_task:
  - "Use semantic versioning (1.2.3 format)"
  - "Feature branches merge when ready"
  - "Main branch always production-ready"
  - "Conventional commit messages"
  - "Product name is always just 'Ralex'"
  - "No artificial version barriers"
  - "Continuous deployment mindset"
  - "Anti-marketing language - facts and metrics only"

anti_marketing_philosophy:
  principle: "factual_descriptions_only"
  avoid:
    - "Marketing language"
    - "Promotional descriptions"
    - "Subjective claims"
    - "Hype words (amazing, revolutionary, etc)"
  
  use_instead:
    - "Exact functionality descriptions"
    - "Measurable metrics (time, tokens, cost)"
    - "Technical specifications"
    - "Quantified benefits with baselines"
    
  metrics_location: ".env or config files only"
  examples_correct:
    - "Reduces API calls by 20% vs baseline"
    - "Routes queries in <3 seconds"
    - "Saves $X per 1000 tokens"
    - "Processes Y requests per minute"
    
  examples_incorrect:
    - "Amazing AI optimization"
    - "Revolutionary intelligence"
    - "Best-in-class performance"
    - "Incredible cost savings"