
id: B03
name: Agent-OS Ethos and Standards Implementation
description: A step-by-step plan to implement core Agent-OS standards for improved developer experience and robustness.
status: defined
priority: high
steps:
  - name: "Step 1: Create a Port Management Utility"
    description: "In a new file, `ralex_core/utils.py`, create a function to find an available network port."
    sub_steps:
      - "Define a function `find_available_port(start_port=8080, end_port=9000)`."
      - "The function should use the `socket` library to iterate through the port range, attempting to bind to each one. The first port it can successfully bind to is considered free."
      - "The function should return the port number."

  - name: "Step 2: Implement Dynamic Port Allocation"
    description: "Modify any service that binds to a port to use the new utility. For now, this applies to the new CCRManager."
    sub_steps:
      - "In `ralex_core/ccr_manager.py`, import `find_available_port` from `ralex_core.utils`."
      - "In the `start_server` method, call `find_available_port()` to get a dynamic port instead of using a hardcoded one."

  - name: "Step 3: Implement GitHub CLI Dependency Check"
    description: "In a new script, `scripts/verify_dependencies.py`, add a function to ensure the `gh` CLI is installed."
    sub_steps:
      - "Create a function `check_gh_cli()`."
      - "This function will use `subprocess.run(['gh', '--version'], ...)`."
      - "If the command fails, it should print an informative error message telling the user to install the GitHub CLI."
      - "Modify `install_ralex.sh` to run `python scripts/verify_dependencies.py` as part of the setup process."

  - name: "Step 4: Integrate `gh` into the TodoWrite Tool"
    description: "Enhance the `TodoWrite` tool to automatically create a GitHub issue when a new task is created."
    sub_steps:
      - "Modify `tools/todo_writer.py`."
      - "In the `create_task` method, after successfully creating a task, add a call to a new private method `_create_github_issue(task)`."
      - "The `_create_github_issue` method will use `subprocess.run` to execute `gh issue create --title <task_name> --body <task_description>`."
      - "Ensure proper error handling in case the `gh` command fails."

  - name: "Step 5: Implement a Flexible Permissions Model"
    description: "Modify the command execution logic to allow for bypassing user confirmation."
    sub_steps:
      - "Locate the function responsible for executing shell commands that might require confirmation (likely in the orchestrator or a security module)."
      - "Add a boolean parameter `assume_yes=False` to this function's signature."
      - "Wrap the confirmation prompt in an `if not assume_yes:` block."
      - "Modify the CLI in `ralex_cli.py` to add a `--yes` or `-y` flag to the relevant commands, which will pass `True` to the `assume_yes` parameter."

  - name: "Step 6: Update Task B03 in .ralex_tasks.json"
    description: "Mark the task as 'completed' and list the modified files."
    sub_steps:
      - "Update the status of task B03 to 'completed'."
      - "Add `ralex_core/utils.py`, `ralex_core/ccr_manager.py`, `scripts/verify_dependencies.py`, `tools/todo_writer.py`, and `ralex_cli.py` to the `files_modified` list."
