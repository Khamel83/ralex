name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  lint-and-format:
    name: Code Quality & Formatting
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black ruff mypy pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        pip install -e .
        
    - name: Run Black (code formatting)
      run: |
        black --check --diff ralex_core/ tools/ tests/
        
    - name: Run Ruff (linting)
      run: |
        ruff check ralex_core/ tools/ tests/
        
    - name: Run MyPy (type checking)
      run: |
        mypy ralex_core/ --ignore-missing-imports || true
        
    - name: Auto-format code (if needed)
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      run: |
        black ralex_core/ tools/ tests/
        
    - name: Commit formatting changes
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add -A
        if ! git diff --staged --quiet; then
          git commit -m "style: auto-format code with Black [skip ci]"
          git push
        fi

  test:
    name: Test Suite
    runs-on: ubuntu-latest
    needs: lint-and-format
    
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-py${{ matrix.python-version }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-py${{ matrix.python-version }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        pip install -e .
        
    - name: Run tests
      run: |
        pytest tests/ -v --cov=ralex_core --cov-report=xml --cov-report=term
        
    - name: Upload coverage to Codecov
      if: matrix.python-version == '3.11'
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: ./coverage.xml
        fail_ci_if_error: false

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: lint-and-format
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
        
    - name: Run Bandit (security linting)
      run: |
        bandit -r ralex_core/ -f json -o bandit-report.json || true
        bandit -r ralex_core/ -f txt
        
    - name: Run Safety (dependency vulnerability check)
      run: |
        safety check || true

  build:
    name: Build Distribution
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
        
    - name: Build distribution
      run: |
        python -m build
        
    - name: Check distribution
      run: |
        twine check dist/*
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: distribution-packages
        path: dist/